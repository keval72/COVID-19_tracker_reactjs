{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js","images/image.png"],"names":["InfoBox","title","text","cases","isBlue","isGreen","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","src","coronaImage","alt","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.03e32c89.chunk.js","sourcesContent":[" import React from 'react';\r\n import { Card, CardContent, Typography } from \"@material-ui/core\";\r\n import './InfoBox.css'; \r\n\r\n function InfoBox({ title, text, cases, isBlue,isGreen, isRed, active, total, ...props}) { \r\n\t return (\r\n\t\t <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"}\r\n\t\t \t${isRed && \"infoBox--red\"} ${isBlue && \"infoBox--blue\"}\r\n\t\t `}> \r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\t\r\n\r\n\t\t\t\t<h2 className={`infoBox__cases ${isGreen && \"infoBox__cases--green\"}\r\n\t\t \t\t${isRed && \"infoBox__cases--red\"} ${isBlue && \"infoBox__cases--blue\"} \r\n\t\t\t\t`}>{cases}</h2>\r\n\r\n\t\t\t\t<Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n\t\t\t\tTotal {text}  \r\n\t\t\t\t</Typography>\r\n\r\n\t\t\t\t<h3 className={`keval ${isGreen && \"infoBox__cases--green\"}\r\n\t\t \t\t${isRed && \"infoBox__cases--red\"} ${isBlue && \"infoBox__cases--blue\"}`}>{total}</h3>\r\n\t\t\t</CardContent>\t\r\n\t\t </Card>\r\n\t )\r\n }\r\n \r\n export default InfoBox\r\n ","import { Circle, Popup } from \"react-leaflet\"; \r\nimport React from \"react\";\r\nimport numeral from \"numeral\"; \r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n\t\thex: \"#4169e1\",\r\n    multiplier: 400,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 350,\r\n  },\r\n  deaths: {\r\n    hex: \"#ff0000\",\r\n    multiplier: 1400,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n\tconst sortedData = [...data];\r\n\r\n\tsortedData.sort((a,b) => {\r\n\t\tif (a.cases > b.cases) {\r\n\t\t\treturn -1;\r\n\t\t} else { \r\n\t\t\treturn 1;\r\n\t\t}\r\n\t})\r\n\treturn sortedData;\r\n}\r\n\r\nexport const prettyPrintStat = (stat) => \r\n\tstat ? `${numeral(stat).format(\"0,0\")}` : \"0\";\r\n\r\nexport const showDataOnMap = (data, casesType='cases') => (\r\n\tdata.map(country => (\r\n\t\t<Circle\r\n\t\t\tcenter={[country.countryInfo.lat, country.countryInfo.long]}\r\n\t\t\tfillOpacity={0.4}\r\n\t\t\tcolor={casesTypeColors[casesType].hex}\r\n\t\t\tfillColor={casesTypeColors[casesType].hex}\r\n\t\t\tradius={\r\n\t\t\t\tMath.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t<Popup>   \r\n\t\t\t\t<div className=\"info-container\">\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName=\"info-flag\"\r\n\t\t\t\t\t\tstyle={{backgroundImage: `url(${country.countryInfo.flag})`}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className=\"info-name\">\r\n\t\t\t\t\t\t{country.country}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"info-confirmed\">\r\n\t\t\t\t\t<span>Cases: {numeral(country.cases).format(\"0,0\")}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"info-recovered\">\r\n\t\t\t\t\t<span>Recovered: {numeral(country.recovered).format(\"0,0\")}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t \t<div className=\"info-deaths\">\r\n\t\t\t\t\t <span>Death: {numeral(country.deaths).format(\"0,0\")}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div className=\"info-active\">\r\n\t\t\t\t\t\t Active: {numeral(country.cases-country.recovered-country.deaths).format(\"0,0\")}\r\n\t\t\t\t\t</div>\t\r\n\t\t\t\t\t<div className=\"info-points\">\r\n\t\t\t\t\t\tActive cases are not accurate for some European countries\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Popup>\r\n\t\t</Circle>\t\r\n\t))\r\n);","import React from 'react';\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\"; \r\n\r\nfunction Map( { countries, casesType, center, zoom }) {\r\n\treturn (\r\n\t\t<div className=\"map\">\r\n\t\t\t<LeafletMap center={center} zoom ={zoom}>\r\n\t\t\t\t<TileLayer \r\n\t\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n\t\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\t/>\r\n\t\t\t\t{showDataOnMap(countries, casesType)}\r\n\t\t\t</LeafletMap>\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Map; \t\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({countries}) {\r\n\treturn (\r\n\t\t<div className=\"table\">\r\n\t\t\t{countries.map(({country, cases}) =>(\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>{country}</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<strong>{numeral(cases).format(\"0,0\")}</strong>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n\tlegend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n\t},\r\n\tscales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n\t\r\n\r\n\tconst buildChartData = (data, casesType = \"cases\") => {\r\n\t\tconst chartData = [];\r\n\t\tlet lastDataPoint;\r\n\r\n\t\tfor(let date in data.cases) {\r\n\t\t\tif (lastDataPoint) {\r\n\t\t\t\tconst newDataPoint = {\r\n\t\t\t\t\tx: date,\r\n\t\t\t\t\ty: data[casesType][date] - lastDataPoint,\r\n\t\t\t\t};\r\n\t\t\t\tchartData.push(newDataPoint);\r\n\t\t\t}\r\n\t\t\tlastDataPoint = data[casesType][date];\r\n\t\t} \t\r\n\t\treturn chartData;\r\n\t};\r\n\r\n  function LineGraph({casesType, ...props }) {\r\n    const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\tawait\tfetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n\r\n\t\t\t\r\n\t\t\tlet chartData = buildChartData(data, casesType);\r\n\t\t\tconsole.log(chartData);\t\r\n\t\t\tsetData(chartData);\r\n\t\t\t});\r\n\t\t}\r\n\t\tfetchData();\r\n    \r\n  }, [casesType]);\r\n\r\n\t\r\n\r\n  return (\r\n    <div className={props.className}>\r\n\t\t {data?.length > 0 && (\r\n\t\t\t <Line\r\n\t\t\t \r\n\t\t\t data={{\r\n\t\t\t\t datasets: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t backgroundColor: \"rgba(204,16,52,0.5)\",\r\n\t\t\t\t\t borderColor: '#CC1034',\t\r\n\t\t\t\t\t data : data,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n       }} \r\n        options={options}\r\n\t\t\t /> \r\n\t\t )}\r\n\t\t \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport coronaImage from './images/image.png';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState([\"worldwide\"]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat:23.83464, lng:80.2897 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n \n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, //Unitated States\n            value: country.countryInfo.iso2, // US\n          }));\n           \n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    \n\n    const url = \n     countryCode === \"worldwide\"\n      ? \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n \n    await fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      setCountry(countryCode);\n      setCountryInfo(data);   \n      \n      countryCode === \"worldwide\"\n      ? setMapCenter([23.83464, 80.2897])\n      : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      countryCode === \"worldwide\" ? setMapZoom(3) : setMapZoom(4);\n     \n    }); \n  };\n  \n  //  function onCountryChange(event){\n  //    const countryCode = event.target.value;\n  //    setCountry(countryCode);\n  //  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app_header\">\n          <img className=\"app__image\" src={coronaImage} alt=\"COVID-19\" />\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox \n            isBlue\n            active={casesType === \"cases\"}\n            onClick = {(e) => setCasesType('cases')}\n            title=\"New Cases:\" \n            text=\"Cases:\"\n            cases={prettyPrintStat(countryInfo.todayCases)} \n            total={prettyPrintStat(countryInfo.cases)} \n          />\n          <InfoBox \n            isGreen\n            active={casesType === \"recovered\"}\n            onClick = {(e) => setCasesType('recovered')}\n            title=\"New Recovered:\" \n            text=\"Recovered:\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)} \n            total={prettyPrintStat(countryInfo.recovered)} \n          />\n          <InfoBox \n            isRed\n            active={casesType === \"deaths\"}\n            onClick = {(e) => setCasesType('deaths')}\n            title=\"New Deaths:\" \n            text=\"Deaths:\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)} \n            total={prettyPrintStat(countryInfo.deaths)} \n          />\n        </div>\n\n       \n        <Map \n        casesType={casesType}\n        countries = {mapCountries}\n        center = {mapCenter}\n        zoom = {mapZoom}        \n        />\n      </div>\n      <Card className=\"app__right\">\n\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3> \n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>      \n      </Card>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}